#!r6rs
(library (tf2scripts gates)
 (export gnot gand gor gnand)
 (import (rnrs base (6))
         (rnrs io simple (6)))
 
 (define (conc . acts)
   (cond ((null? acts) "")
         ((null? (cdr acts)) (car acts))
         (else (string-append (car acts) "; " (apply conc (cdr acts))))))
 
 (define (conn nametgt input bit)
   (string-append nametgt "_in_" (number->string input) "__" (number->string bit)))
 
 
 
 
 (define (outs name out-action0 out-action1)
   (display (string-append "alias \"" name "_out__0\" \"" out-action0 "\""))(newline)
   (display (string-append "alias \"" name "_out__1\" \"" out-action1 "\""))(newline))
 
 (define (ticks name depends)
   (display (string-append "alias \"" name "_tick\" \"" name "_output\""))(newline)
   (display (string-append "alias \"" name "_tickrecurse\" \"" (apply conc (map (lambda (d)
                                                                                  (string-append d "_execute")) depends)) "\""))(newline)
   (display (string-append "alias \"" name "_rcl\" \"alias " name "_execute ; " name "_tickrecurse; " name "_tick; alias " name "_execute " name "_rcl\""))(newline)
   (display (string-append "alias \"" name "_execute\" \"" name "_rcl\""))(newline))
 
 
 
 
 (define (gnot name depends out-action0 out-action1)
   (display (string-append "alias \"" name "_in__0\" \"alias " name "_output " name "_out__1\""))(newline)
   (display (string-append "alias \"" name "_in__1\" \"alias " name "_output " name "_out__0\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_output\" \"\""))(newline)(newline)
   
   (outs name out-action0 out-action1)(newline)
   
   (ticks name depends)(newline)(newline))
 
 
 (define (gand name depends out-action0 out-action1)
   (display (string-append "alias \"" name "_in_0__0\" \"alias " name "_output " name "_out__0\""))(newline)
   (display (string-append "alias \"" name "_in_0__1\" \"alias " name "_output " name "_stage1\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_stage1\" \"" name "_out__0\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_in_1__0\" \"alias " name "_stage1 " name "_out__0\""))(newline)
   (display (string-append "alias \"" name "_in_1__1\" \"alias " name "_stage1 " name "_out__1\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_output\" \"\""))(newline)(newline)
   
   (outs name out-action0 out-action1)(newline)
   
   (ticks name depends)(newline)(newline))
 
 
 (define (gor name depends out-action0 out-action1)
   (display (string-append "alias \"" name "_in_0__0\" \"alias " name "_output " name "_stage1\""))(newline)
   (display (string-append "alias \"" name "_in_0__1\" \"alias " name "_output " name "_out__1\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_stage1\" \"" name "_out__0\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_in_1__0\" \"alias " name "_stage1 " name "_out__0\""))(newline)
   (display (string-append "alias \"" name "_in_1__1\" \"alias " name "_stage1 " name "_out__1\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_output\" \"\""))(newline)(newline)
   
   (outs name out-action0 out-action1)(newline)
   
   (ticks name depends)(newline)(newline))
 
 
 (define (gxor name depends out-action0 out-action1)
   (display (string-append "alias \"" name "_in_0__0\" \"alias " name "_output " name "_stage1\""))(newline)
   (display (string-append "alias \"" name "_in_0__1\" \"alias " name "_output " name "_stage2\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_stage1\" \"" name "_out__0\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_in_1__0\" \"alias " name "_stage1 " name "_out__0; alias " name "_stage2 " name "_out__1\""))(newline)
   (display (string-append "alias \"" name "_in_1__1\" \"alias " name "_stage1 " name "_out__1; alias " name "_stage2 " name "_out__0\""))(newline)(newline)
   
   (display (string-append "alias \"" name "_output\" \"\""))(newline)(newline)
   
   (outs name out-action0 out-action1)(newline)
   
   (ticks name depends)(newline)(newline))
 
 
 (define (gnand name depends out-action0 out-action1)
   (let ((andname (string-append name "_auto_and"))
         (notname  (string-append name "_auto_not")))
     (gand andname depends (conn notname 0 0) (conn notname 0 1))
     (gnot notname `(,andname) out-action0 out-action1)))
 
 )